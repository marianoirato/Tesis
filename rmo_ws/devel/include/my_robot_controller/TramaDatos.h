// Generated by gencpp from file my_robot_controller/TramaDatos.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_CONTROLLER_MESSAGE_TRAMADATOS_H
#define MY_ROBOT_CONTROLLER_MESSAGE_TRAMADATOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_controller
{
template <class ContainerAllocator>
struct TramaDatos_
{
  typedef TramaDatos_<ContainerAllocator> Type;

  TramaDatos_()
    : u_m()
    , v_bat(0)  {
      u_m.assign(0.0);
  }
  TramaDatos_(const ContainerAllocator& _alloc)
    : u_m()
    , v_bat(0)  {
  (void)_alloc;
      u_m.assign(0.0);
  }



   typedef boost::array<float, 4>  _u_m_type;
  _u_m_type u_m;

   typedef uint16_t _v_bat_type;
  _v_bat_type v_bat;





  typedef boost::shared_ptr< ::my_robot_controller::TramaDatos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_controller::TramaDatos_<ContainerAllocator> const> ConstPtr;

}; // struct TramaDatos_

typedef ::my_robot_controller::TramaDatos_<std::allocator<void> > TramaDatos;

typedef boost::shared_ptr< ::my_robot_controller::TramaDatos > TramaDatosPtr;
typedef boost::shared_ptr< ::my_robot_controller::TramaDatos const> TramaDatosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_controller::TramaDatos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_controller::TramaDatos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_controller::TramaDatos_<ContainerAllocator1> & lhs, const ::my_robot_controller::TramaDatos_<ContainerAllocator2> & rhs)
{
  return lhs.u_m == rhs.u_m &&
    lhs.v_bat == rhs.v_bat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_controller::TramaDatos_<ContainerAllocator1> & lhs, const ::my_robot_controller::TramaDatos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_controller::TramaDatos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_controller::TramaDatos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_controller::TramaDatos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc2aa8d0931f2ca3f5ab9b875c7494e0";
  }

  static const char* value(const ::my_robot_controller::TramaDatos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc2aa8d0931f2ca3ULL;
  static const uint64_t static_value2 = 0xf5ab9b875c7494e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_controller/TramaDatos";
  }

  static const char* value(const ::my_robot_controller::TramaDatos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] u_m\n"
"uint16 v_bat\n"
"\n"
;
  }

  static const char* value(const ::my_robot_controller::TramaDatos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u_m);
      stream.next(m.v_bat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TramaDatos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_controller::TramaDatos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_controller::TramaDatos_<ContainerAllocator>& v)
  {
    s << indent << "u_m[]" << std::endl;
    for (size_t i = 0; i < v.u_m.size(); ++i)
    {
      s << indent << "  u_m[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.u_m[i]);
    }
    s << indent << "v_bat: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.v_bat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_CONTROLLER_MESSAGE_TRAMADATOS_H
